import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Plus, Minus, X, Divide, Sigma, Table, Clock, Ruler, Scale, Zap, Eye } from 'lucide-react';
import SubtractionModal from './SubtractionModal';
type Skill = {
  icon: React.ComponentType<any>;
  title: string;
  desc: string;
  from: string;
  to: string;
  sticker?: string;
  hrefPreview?: string;
};
interface SkillsSectionProps {
  skills?: Skill[];
  onPreview?: (skill: Skill) => void;
}
const defaultSkills: Skill[] = [{
  icon: Plus,
  title: '‡∏ö‡∏ß‡∏Å',
  desc: '‡∏ù‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å',
  from: 'from-pink-100',
  to: 'to-red-100',
  sticker: 'üßÆ',
  hrefPreview: '#'
}, {
  icon: Minus,
  title: '‡∏•‡∏ö',
  desc: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏•‡∏Ç ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö',
  from: 'from-blue-100',
  to: 'to-cyan-100',
  sticker: 'üß†',
  hrefPreview: '/subtraction'
}, {
  icon: X,
  title: '‡∏Ñ‡∏π‡∏ì',
  desc: '‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏ì ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏°‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
  from: 'from-amber-100',
  to: 'to-orange-100',
  sticker: 'üêØ',
  hrefPreview: '#'
}, {
  icon: Divide,
  title: '‡∏´‡∏≤‡∏£',
  desc: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£ ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ô‡∏∏‡∏Å',
  from: 'from-green-100',
  to: 'to-emerald-100',
  sticker: 'ü¶ä',
  hrefPreview: '#'
}, {
  icon: Sigma,
  title: '‡πÄ‡∏•‡∏Ç‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°',
  desc: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏î‡∏±‡∏ö',
  from: 'from-violet-100',
  to: 'to-indigo-100',
  sticker: 'üß©',
  hrefPreview: '#'
}, {
  icon: Table,
  title: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á',
  desc: '‡∏à‡∏î‡∏à‡∏≥‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
  from: 'from-sky-100',
  to: 'to-teal-100',
  sticker: 'üêº',
  hrefPreview: '#'
}, {
  icon: Clock,
  title: '‡πÄ‡∏ß‡∏•‡∏≤',
  desc: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤',
  from: 'from-yellow-100',
  to: 'to-lime-100',
  sticker: '‚è∞',
  hrefPreview: '#'
}, {
  icon: Ruler,
  title: '‡∏Ç‡∏ô‡∏≤‡∏î/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß',
  desc: '‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ',
  from: 'from-fuchsia-100',
  to: 'to-pink-100',
  sticker: 'üìè',
  hrefPreview: '#'
}, {
  icon: Scale,
  title: '‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
  desc: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏ß‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏±‡∏Å',
  from: 'from-rose-100',
  to: 'to-purple-100',
  sticker: '‚öñÔ∏è',
  hrefPreview: '#'
}, {
  icon: Zap,
  title: '‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß',
  desc: '‡∏ù‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
  from: 'from-neutral-100',
  to: 'to-stone-100',
  sticker: 'üöÄ',
  hrefPreview: '#'
}];
const SkillCard: React.FC<{
  skill: Skill;
  onPreview?: (skill: Skill) => void;
}> = ({
  skill,
  onPreview
}) => {
  const handlePreviewClick = (e: React.MouseEvent) => {
    if (onPreview) {
      e.preventDefault();
      onPreview(skill);
    }
  };
  const IconComponent = skill.icon;
  return <div className={`relative rounded-2xl shadow-lg hover:-translate-y-1 hover:shadow-xl transition-all duration-300 bg-gradient-to-br ${skill.from} ${skill.to} ring-1 ring-black/5 p-6`} role="button" tabIndex={0}>
      {/* Sticker emoji */}
      {skill.sticker && <div className="absolute top-3 right-3 text-2xl animate-bounce" aria-hidden="true">
          {skill.sticker}
        </div>}

      {/* Icon container */}
      <div className="flex items-center justify-center w-12 h-12 mb-4 bg-white/70 ring-1 ring-black/10 backdrop-blur rounded-xl">
        <IconComponent className="w-6 h-6 text-gray-700" />
      </div>

      {/* Content */}
      <div className="mb-6">
        <h3 className="font-extrabold text-lg text-gray-800 mb-2">
          {skill.title}
        </h3>
        <p className="text-sm leading-6 text-gray-600">
          {skill.desc}
        </p>
      </div>

      {/* Preview button */}
      <Link to={skill.hrefPreview || '#'} onClick={handlePreviewClick} className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-fuchsia-500 to-indigo-500 hover:from-fuchsia-400 hover:to-indigo-400 text-white text-sm font-medium rounded-full shadow-md ring-1 ring-black/10 hover:-translate-y-0.5 transition-all duration-200" aria-label={`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î ${skill.title}`}>
        <Eye className="w-4 h-4" />
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
      </Link>
    </div>;
};
const SkillsSection: React.FC<SkillsSectionProps> = ({
  skills = defaultSkills,
  onPreview
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleSkillClick = (skill: Skill) => {
    if (skill.title === '‡∏•‡∏ö') {
      setIsModalOpen(true);
    } else if (onPreview) {
      onPreview(skill);
    }
  };

  return <section className="mb-12">
      <div className="text-center mb-8">
        <h2 className="text-2xl md:text-3xl font-bold text-white mb-4">
          üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </h2>
        <p className="text-white/80 text-lg max-w-2xl mx-auto">‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô ‚Äî¬†</p>
      </div>

      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {skills.map((skill, index) => <SkillCard key={index} skill={skill} onPreview={handleSkillClick} />)}
        </div>
      </div>
      
      <SubtractionModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
      />
    </section>;
};
export default SkillsSection;