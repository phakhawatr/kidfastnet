import { useState, useEffect } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '../hooks/useAuth';
import Header from '../components/Header';
import Footer from '../components/Footer';
import { ToastManager } from '../components/Toast';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface SignupData {
  // Step 1
  nickname: string;
  age: string;
  grade: string;
  // Step 2
  avatar: string;
  learningStyle: string;
  // Step 3
  parentEmail: string;
  parentPhone: string;
  password: string;
  referrerMemberId: string;
  acceptTerms: boolean;
  acceptNewsletter: boolean;
}

const Signup = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [showSuccessDialog, setShowSuccessDialog] = useState(false);
  const [formData, setFormData] = useState<SignupData>({
    nickname: '',
    age: '',
    grade: '',
    avatar: '',
    learningStyle: '',
    parentEmail: '',
    parentPhone: '',
    password: '',
    referrerMemberId: '',
    acceptTerms: false,
    acceptNewsletter: false
  });
  const [affiliateCode, setAffiliateCode] = useState<string | null>(null);

  const navigate = useNavigate();
  const { signup } = useAuth();
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const refCode = searchParams.get('ref');
    if (refCode) {
      setAffiliateCode(refCode);
      updateFormData('referrerMemberId', refCode);
      ToastManager.show({
        message: `‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${refCode}`,
        type: 'info'
      });
    }
  }, [searchParams]);

  const grades = [
    { id: '1', label: '‡∏õ.1', color: 'bg-[hsl(var(--grade-1))]' },
    { id: '2', label: '‡∏õ.2', color: 'bg-[hsl(var(--grade-2))]' },
    { id: '3', label: '‡∏õ.3', color: 'bg-[hsl(var(--grade-3))]' },
    { id: '4', label: '‡∏õ.4', color: 'bg-[hsl(var(--grade-4))]' },
    { id: '5', label: '‡∏õ.5', color: 'bg-[hsl(var(--grade-5))]' },
    { id: '6', label: '‡∏õ.6', color: 'bg-[hsl(var(--grade-6))]' }
  ];

  const avatars = [
    { id: 'cat', emoji: 'üê±' },
    { id: 'dog', emoji: 'üê∂' },
    { id: 'rabbit', emoji: 'üê∞' },
    { id: 'frog', emoji: 'üê∏' },
    { id: 'unicorn', emoji: 'ü¶Ñ' },
    { id: 'fox', emoji: 'ü¶ä' },
    { id: 'panda', emoji: 'üêº' },
    { id: 'tiger', emoji: 'üêØ' }
  ];

  const learningStyles = [
    '‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    '‡∏ù‡∏∂‡∏Å‡∏î‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
    '‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏∂‡∏Å',
    '‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'
  ];

  const updateFormData = (field: keyof SignupData, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const validateStep = (step: number) => {
    switch (step) {
      case 1:
        return formData.nickname && formData.age && formData.grade;
      case 2:
        return formData.avatar && formData.learningStyle;
      case 3:
        return formData.parentEmail && 
               formData.parentPhone && 
               validatePhoneNumber(formData.parentPhone) &&
               formData.password.length >= 6 && 
               formData.acceptTerms;
      default:
        return false;
    }
  };

  const validatePhoneNumber = (phone: string) => {
    // Thai phone number format: 08X-XXX-XXXX, 09X-XXX-XXXX, 06X-XXX-XXXX
    const phoneRegex = /^(08[0-9]|09[0-9]|06[0-9])-[0-9]{3}-[0-9]{4}$/;
    return phoneRegex.test(phone);
  };

  // Phase 1: Sanitize phone number - convert similar characters and clean format
  const sanitizePhoneNumber = (phone: string) => {
    let cleaned = phone
      // Convert similar characters to numbers
      .replace(/[√ò√∏ÔºØÔΩè]/g, '0')  // O with stroke, fullwidth O, etc ‚Üí 0
      .replace(/[Oo]/g, '0')       // Letter O ‚Üí 0
      .replace(/[lLÔΩåÔº¨]/g, '1')   // Letter l/L ‚Üí 1
      .replace(/[Ii]/g, '1')       // Letter i/I ‚Üí 1
      // Remove all non-digit characters except hyphens
      .replace(/[^\d-]/g, '')
      // Remove extra hyphens
      .replace(/-+/g, '-')
      // Remove leading/trailing hyphens
      .replace(/^-|-$/g, '');
    
    // Auto-format: add hyphens if not present
    const digitsOnly = cleaned.replace(/-/g, '');
    if (digitsOnly.length === 10) {
      return `${digitsOnly.slice(0, 3)}-${digitsOnly.slice(3, 6)}-${digitsOnly.slice(6, 10)}`;
    }
    
    return cleaned;
  };

  // Phase 2: Format phone number as user types
  const formatPhoneNumber = (value: string) => {
    // Remove all non-digits
    const digitsOnly = value.replace(/\D/g, '');
    
    // Apply formatting
    if (digitsOnly.length <= 3) {
      return digitsOnly;
    } else if (digitsOnly.length <= 6) {
      return `${digitsOnly.slice(0, 3)}-${digitsOnly.slice(3)}`;
    } else {
      return `${digitsOnly.slice(0, 3)}-${digitsOnly.slice(3, 6)}-${digitsOnly.slice(6, 10)}`;
    }
  };

  // Handle phone input change with real-time sanitization and formatting
  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    let value = e.target.value;
    
    // First sanitize similar characters
    value = value
      .replace(/[√ò√∏ÔºØÔΩè]/g, '0')
      .replace(/[Oo]/g, '0')
      .replace(/[lLÔΩåÔº¨]/g, '1')
      .replace(/[Ii]/g, '1');
    
    // Then format
    const formatted = formatPhoneNumber(value);
    updateFormData('parentPhone', formatted);
  };

  // Validate referrer member ID
  const validateReferrerMemberId = async (memberId: string) => {
    if (!memberId || memberId.trim() === '') return null;
    
    try {
      // Check if member_id exists and get affiliate_code
      const { data, error } = await supabase
        .from('user_registrations')
        .select('member_id, parent_email')
        .eq('member_id', memberId.trim())
        .eq('status', 'approved')
        .maybeSingle();
      
      if (error || !data) {
        return null;
      }
      
      // Get affiliate code for this user
      const { data: affiliateData } = await supabase
        .from('affiliate_codes')
        .select('affiliate_code')
        .eq('user_id', data.member_id)
        .maybeSingle();
      
      return affiliateData?.affiliate_code || null;
    } catch (error) {
      console.error('Error validating referrer:', error);
      return null;
    }
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => prev + 1);
    } else {
      ToastManager.show({
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        type: 'error'
      });
    }
  };

  const handleBack = () => {
    setCurrentStep(prev => prev - 1);
  };

  const handleSubmit = async () => {
    if (validateStep(3)) {
      try {
        // Phase 1: Sanitize phone number before validation
        const sanitizedPhone = sanitizePhoneNumber(formData.parentPhone);
        
        // Validate phone number format after sanitization
        if (!validatePhoneNumber(sanitizedPhone)) {
          ToastManager.show({
            message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 08X-XXX-XXXX',
            type: 'error'
          });
          return;
        }

        // Validate and get affiliate code from member ID if provided
        let finalAffiliateCode = affiliateCode;
        if (formData.referrerMemberId && formData.referrerMemberId.trim() !== '') {
          const validatedCode = await validateReferrerMemberId(formData.referrerMemberId);
          if (validatedCode) {
            finalAffiliateCode = validatedCode;
            console.log('‚úÖ Validated referrer member ID:', formData.referrerMemberId, '-> Code:', validatedCode);
          } else {
            ToastManager.show({
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
              type: 'error'
            });
            return;
          }
        }

        // Debug logging
        console.log('üì§ Calling register_new_user with:', {
          nickname: formData.nickname,
          age: parseInt(formData.age),
          grade: `‡∏õ.${formData.grade}`,
          email: formData.parentEmail,
          phone: sanitizedPhone,
          has_affiliate: !!finalAffiliateCode
        });

        // Call Security Definer function instead of direct INSERT
        // This bypasses RLS policies while maintaining security through database triggers
        const { data: userId, error: registrationError } = await supabase
          .rpc('register_new_user', {
            p_nickname: formData.nickname,
            p_age: parseInt(formData.age),
            p_grade: `‡∏õ.${formData.grade}`,
            p_avatar: formData.avatar,
            p_learning_style: formData.learningStyle,
            p_parent_email: formData.parentEmail,
            p_parent_phone: sanitizedPhone,
            p_password: formData.password,
            p_affiliate_code: finalAffiliateCode || null
          });

        if (registrationError) throw registrationError;

        // Create registrationData object for affiliate tracking
        const registrationData = userId ? { id: userId } : null;

        console.log('‚úÖ Registration successful:', { userId });

        // Track affiliate referral if code exists
        if (finalAffiliateCode && registrationData) {
          try {
            await supabase.rpc('track_referral_signup', {
              p_referred_email: formData.parentEmail,
              p_affiliate_code: finalAffiliateCode
            });
          } catch (error) {
            console.error('Error tracking referral:', error);
          }
        }

        // Show success dialog instead of toast and immediate navigation
        setShowSuccessDialog(true);
      } catch (error: any) {
        console.error('Signup error:', error);
        
        // Phase 4: Enhanced Error Handling - Provide specific, actionable error messages
        let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å';
        let duration = 6000;
        
        // Check for phone validation errors from database trigger
        if (error.message?.includes('Invalid phone format')) {
          const phoneMatch = error.message.match(/Invalid phone format: ([^.]+)/);
          const attemptedPhone = phoneMatch ? phoneMatch[1] : formData.parentPhone;
          errorMessage = `üî¥ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å: "${attemptedPhone}"\n\n‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n‚Ä¢ 08X-XXX-XXXX\n‚Ä¢ 09X-XXX-XXXX\n‚Ä¢ 06X-XXX-XXXX\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678`;
          duration = 8000;
        } 
        // Check for RLS policy violations
        else if (error.message?.includes('row-level security') || error.message?.includes('violates row-level security policy')) {
          errorMessage = 'üõ°Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n‚úì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n‚úì ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‚úì ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï';
          duration = 7000;
        }
        // Check for duplicate email/phone
        else if (error.message?.includes('duplicate') || error.message?.includes('already exists') || error.message?.includes('unique constraint')) {
          errorMessage = '‚ö†Ô∏è ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô\n‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
          duration = 7000;
        }
        // Check for nickname validation
        else if (error.message?.includes('Nickname must be between')) {
          errorMessage = 'üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 1-50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
        }
        // Check for age validation
        else if (error.message?.includes('Age must be between')) {
          errorMessage = 'üéÇ ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-150 ‡∏õ‡∏µ';
        }
        // Check for grade validation
        else if (error.message?.includes('Grade must be between')) {
          errorMessage = 'üè´ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        }
        // Check for email validation
        else if (error.message?.includes('Invalid email format')) {
          errorMessage = 'üìß ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: example@email.com';
        }
        // Check for password validation
        else if (error.message?.includes('Password must be between')) {
          errorMessage = 'üîê ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 6-100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
        }
        // Check for network errors
        else if (error.message?.includes('Failed to fetch') || error.message?.includes('Network') || error.message?.includes('network')) {
          errorMessage = 'üåê ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        }
        // Default error with details
        else if (error.message) {
          errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n${error.message}`;
        }
        
        ToastManager.show({
          message: errorMessage,
          type: 'error',
          duration: duration
        });
      }
    }
  };

  return (
    <div className="min-h-screen">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          {/* Alert */}
          <div className="card-glass p-4 mb-8 border-l-4 border-green-500">
            <div className="flex items-center gap-3">
              üõ°Ô∏è <span className="font-medium text-green-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</span>
            </div>
            <p className="text-sm text-green-600 mt-1 ml-8">
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            </p>
          </div>

          {/* Contact Warning */}
          <div className="card-glass p-6 mb-8 border-l-4 border-orange-500 bg-gradient-to-r from-orange-50 to-yellow-50">
            <div className="flex items-center gap-3 mb-2">
              <span className="text-2xl">‚ö†Ô∏è</span>
              <span className="font-bold text-xl text-orange-700">‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ @kidfast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà</span>
            </div>
            <div className="flex justify-center mt-4">
              <a href="https://lin.ee/hFVAoTI" className="inline-block">
                <img 
                  src="https://scdn.line-apps.com/n/line_add_friends/btn/th.png" 
                  alt="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô" 
                  className="inline-block hover:opacity-80 transition-opacity" 
                  style={{ height: '36px' }}
                />
              </a>
            </div>
          </div>

          {/* Title */}
          <div className="text-center mb-8">
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-4">
              üåü ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üåü
            </h1>
            <p className="text-white/80">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå</p>
          </div>

          {/* Stepper */}
          <div className="flex justify-center items-center mb-8">
            {[1, 2, 3].map((step, index) => (
              <div key={step} className="flex items-center">
                <div className={`stepper-circle ${currentStep >= step ? 'active' : 'inactive'}`}>
                  {step}
                </div>
                {index < 2 && (
                  <div className={`w-16 h-1 mx-2 rounded ${currentStep > step ? 'bg-[hsl(var(--active-ring))]' : 'bg-gray-300'}`} />
                )}
              </div>
            ))}
          </div>

          {/* Form */}
          <div className="card-glass p-8">
            {/* Step 1: Kid Info */}
            {currentStep === 1 && (
              <div className="space-y-6">
                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üéØ <span>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏π <span className="text-red-500">*</span></span>
                  </label>
                  <input
                    type="text"
                    placeholder="xx"
                    className="input-field"
                    value={formData.nickname}
                    onChange={(e) => updateFormData('nickname', e.target.value)}
                  />
                  <p className="text-sm text-[hsl(var(--text-muted))] mt-1">‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</p>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üç∞ <span>‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏π <span className="text-red-500">*</span></span>
                  </label>
                  <select
                    className="input-field"
                    value={formData.age}
                    onChange={(e) => updateFormData('age', e.target.value)}
                  >
                    <option value="">6 ‡∏Ç‡∏ß‡∏ö</option>
                    {Array.from({ length: 7 }, (_, i) => i + 6).map(age => (
                      <option key={age} value={age}>{age} ‡∏Ç‡∏ß‡∏ö</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üè´ <span>‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏π <span className="text-red-500">*</span></span>
                  </label>
                  <div className="grid grid-cols-3 gap-4">
                    {grades.map((grade) => (
                      <div
                        key={grade.id}
                        onClick={() => updateFormData('grade', grade.id)}
                        className={`grade-card ${grade.color} ${formData.grade === grade.id ? 'active' : ''} text-center`}
                      >
                        <div className="w-8 h-8 bg-blue-600 text-white rounded flex items-center justify-center font-bold mx-auto mb-2">
                          {grade.id}
                        </div>
                        <div className="font-medium">{grade.label}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="flex justify-end">
                  <button onClick={handleNext} className="btn-primary">
                    ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
                  </button>
                </div>
              </div>
            )}

            {/* Step 2: Preferences */}
            {currentStep === 2 && (
              <div className="space-y-6">
                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üòä <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏π‡∏ä‡∏≠‡∏ö</span>
                  </label>
                  <div className="grid grid-cols-4 gap-4">
                    {avatars.map((avatar) => (
                      <div
                        key={avatar.id}
                        onClick={() => updateFormData('avatar', avatar.id)}
                        className={`avatar-option ${formData.avatar === avatar.id ? 'selected' : ''}`}
                      >
                        {avatar.emoji}
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üéÆ <span>‡∏´‡∏ô‡∏π‡∏ä‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?</span>
                  </label>
                  <select
                    className="input-field"
                    value={formData.learningStyle}
                    onChange={(e) => updateFormData('learningStyle', e.target.value)}
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                    {learningStyles.map((style) => (
                      <option key={style} value={style}>{style}</option>
                    ))}
                  </select>
                </div>

                <div className="flex justify-between">
                  <button onClick={handleBack} className="btn-secondary">
                    ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                  </button>
                  <button onClick={handleNext} className="btn-primary">
                    ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
                  </button>
                </div>
              </div>
            )}

            {/* Step 3: Parent Info */}
            {currentStep === 3 && (
              <div className="space-y-6">
                <div className="flex items-center gap-2 text-lg font-medium mb-4">
                  üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</span>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üìß <span>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á <span className="text-red-500">*</span></span>
                  </label>
                  <input
                    type="email"
                    placeholder="parent@email.com"
                    className="input-field"
                    value={formData.parentEmail}
                    onChange={(e) => updateFormData('parentEmail', e.target.value)}
                  />
                  <p className="text-sm text-[hsl(var(--text-muted))] mt-1">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üì± <span>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á <span className="text-red-500">*</span></span>
                  </label>
                  <div className="relative">
                    <input
                      type="tel"
                      placeholder="08X-XXX-XXXX"
                      className={`input-field pr-10 ${
                        formData.parentPhone 
                          ? validatePhoneNumber(formData.parentPhone) 
                            ? 'border-green-500 focus:border-green-500' 
                            : 'border-red-500 focus:border-red-500'
                          : ''
                      }`}
                      value={formData.parentPhone}
                      onChange={handlePhoneChange}
                      maxLength={12}
                      required
                    />
                    {formData.parentPhone && (
                      <div className="absolute right-3 top-1/2 -translate-y-1/2">
                        {validatePhoneNumber(formData.parentPhone) ? (
                          <span className="text-green-500 text-xl">‚úì</span>
                        ) : (
                          <span className="text-red-500 text-xl">‚úó</span>
                        )}
                      </div>
                    )}
                  </div>
                  <p className="text-sm text-[hsl(var(--text-muted))] mt-1">
                    {formData.parentPhone && !validatePhoneNumber(formData.parentPhone) 
                      ? <span className="text-red-500">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 081-234-5678)</span>
                      : <span>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: <strong>081-234-5678</strong> ‡∏´‡∏£‡∏∑‡∏≠ <strong>089-765-4321</strong></span>
                    }
                  </p>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üîí <span>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô <span className="text-red-500">*</span></span>
                  </label>
                  <input
                    type="password"
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß)"
                    className="input-field"
                    value={formData.password}
                    onChange={(e) => updateFormData('password', e.target.value)}
                  />
                  <p className="text-sm text-[hsl(var(--text-muted))] mt-1">‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πá‡∏Å‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
                </div>

                <div>
                  <label className="flex items-center gap-2 text-lg font-medium mb-3">
                    üéÅ <span>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ <span className="text-[hsl(var(--text-muted))]">(‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</span></span>
                  </label>
                  <input
                    type="text"
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 5 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 00001)"
                    className="input-field"
                    value={formData.referrerMemberId}
                    onChange={(e) => updateFormData('referrerMemberId', e.target.value)}
                    maxLength={5}
                  />
                  <p className="text-sm text-[hsl(var(--text-muted))] mt-1">
                    ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©
                  </p>
                </div>

                <div className="space-y-3">
                  <label className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      className="mt-1 w-4 h-4 rounded border-gray-300 focus:ring-2 focus:ring-[hsl(var(--focus-ring))]"
                      checked={formData.acceptTerms}
                      onChange={(e) => updateFormData('acceptTerms', e.target.checked)}
                    />
                    <span className="text-sm">
                      ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö <span className="text-red-500 font-medium">‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</span> ‡πÅ‡∏•‡∏∞ <span className="text-red-500 font-medium">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span> <span className="text-red-500">*</span>
                    </span>
                  </label>

                  <label className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      className="mt-1 w-4 h-4 rounded border-gray-300 focus:ring-2 focus:ring-[hsl(var(--focus-ring))]"
                      checked={formData.acceptNewsletter}
                      onChange={(e) => updateFormData('acceptNewsletter', e.target.checked)}
                    />
                    <span className="text-sm">‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• üìñ</span>
                  </label>
                </div>

                <div className="flex justify-between">
                  <button onClick={handleBack} className="btn-secondary">
                    ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô ‡∏Å‡∏•‡∏±‡∏ö
                  </button>
                  <button onClick={handleSubmit} className="btn-primary text-lg px-8">
                    üöÄ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å! üöÄ
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
      
      <Footer />

      {/* Success Dialog */}
      <AlertDialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>
        <AlertDialogContent className="bg-gradient-to-br from-green-50 to-green-100 border-2 border-green-500">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-green-700 text-center text-2xl flex items-center justify-center gap-3">
              <span className="text-4xl">üéâ</span>
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
            </AlertDialogTitle>
            <AlertDialogDescription className="text-green-600 text-center text-base mt-4">
              <div className="space-y-3">
                <p className="font-semibold text-lg">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!</p>
                <div className="bg-white/60 rounded-lg p-4 text-left">
                  <p className="mb-2">üìß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•</p>
                  <p>üí¨ ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô @kidfast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà</p>
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="justify-center mt-4">
            <AlertDialogAction 
              className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 text-lg font-semibold"
              onClick={() => {
                setShowSuccessDialog(false);
                navigate('/login');
              }}
            >
              ‡∏ï‡∏Å‡∏•‡∏á
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default Signup;