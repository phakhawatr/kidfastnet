import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const {
      userId,
      exerciseType,
      nickname,
      score,
      total,
      percentage,
      timeSpent,
      level,
      problems
    } = await req.json()

    console.log('Sending LINE notification for user:', userId, 'Exercise:', exerciseType)

    // Create Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey)

    // Get LINE Notify token from user_registrations
    const { data: userData, error: userError } = await supabase
      .from('user_registrations')
      .select('line_notify_token')
      .eq('id', userId)
      .single()

    if (userError || !userData) {
      console.error('Error fetching user data:', userError)
      return new Response(
        JSON.stringify({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 404 }
      )
    }

    const lineToken = userData.line_notify_token

    if (!lineToken) {
      console.log('No LINE Notify token found for user')
      return new Response(
        JSON.stringify({ error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Notify' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    // Map exercise type to Thai
    const exerciseTypeMap: Record<string, string> = {
      addition: '‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç',
      subtraction: '‡∏•‡∏ö‡πÄ‡∏•‡∏Ç',
      multiplication: '‡∏Ñ‡∏π‡∏ì',
      division: '‡∏´‡∏≤‡∏£',
      test: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö'
    }

    const exerciseNameThai = exerciseTypeMap[exerciseType] || exerciseType

    // Build message header
    let message = `üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå\n\n`
    message += `üë§ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${nickname}\n`
    message += `üìö ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${exerciseNameThai}\n`
    message += `‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score}/${total} (${percentage}%)\n`
    message += `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: ${timeSpent}\n`
    message += `üìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${level}\n\n`

    // Build detailed results
    let detailsText = 'üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:\n\n'

    if (problems && problems.length > 0) {
      // Check if message would be too long
      const testMessage = problems.map((p: any) => {
        const emoji = p.isCorrect ? '‚úì' : '‚úó'
        const status = p.isCorrect ? '(‡∏ñ‡∏π‡∏Å)' : `(‡∏ú‡∏¥‡∏î, ‡πÄ‡∏â‡∏•‡∏¢: ${p.correctAnswer})`
        return `${emoji} ‡∏Ç‡πâ‡∏≠ ${p.questionNumber}: ${p.question}=${p.userAnswer} ${status}`
      }).join('\n')

      const fullMessage = message + detailsText + testMessage

      // LINE Notify has ~1000 character limit
      if (fullMessage.length > 950) {
        // Show condensed format: correct answers summary + wrong problems only
        const wrongProblems = problems.filter((p: any) => !p.isCorrect)
        const correctNumbers = problems
          .filter((p: any) => p.isCorrect)
          .map((p: any) => p.questionNumber)
          .join(', ')

        detailsText += `‚úì ‡∏ñ‡∏π‡∏Å ${score} ‡∏Ç‡πâ‡∏≠: ${correctNumbers || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n\n`

        if (wrongProblems.length > 0) {
          detailsText += '‚úó ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î:\n'
          for (const p of wrongProblems) {
            detailsText += `‡∏Ç‡πâ‡∏≠ ${p.questionNumber}: ${p.question}=${p.userAnswer} (‡πÄ‡∏â‡∏•‡∏¢: ${p.correctAnswer})\n`
          }
        }
      } else {
        // Show all problems in detail
        for (const p of problems) {
          const emoji = p.isCorrect ? '‚úì' : '‚úó'
          const status = p.isCorrect ? '(‡∏ñ‡∏π‡∏Å)' : `(‡∏ú‡∏¥‡∏î, ‡πÄ‡∏â‡∏•‡∏¢: ${p.correctAnswer})`
          detailsText += `${emoji} ‡∏Ç‡πâ‡∏≠ ${p.questionNumber}: ${p.question}=${p.userAnswer} ${status}\n`
        }
      }
    }

    // Add footer message
    message += detailsText + '\n'

    // Add encouraging message based on percentage
    if (percentage >= 80) {
      message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: üåü ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞\n'
    } else if (percentage >= 60) {
      message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: üëç ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏•‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î‡∏à‡∏∞‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô\n'
    } else {
      message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: üìñ ‡∏•‡∏≠‡∏á‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞\n'
    }

    message += '\nüéì ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ KidFast.net'

    console.log('Sending LINE message, length:', message.length)

    // Send to LINE Notify API
    const lineResponse = await fetch('https://notify-api.line.me/api/notify', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lineToken}`,
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({ message }),
    })

    if (!lineResponse.ok) {
      const errorText = await lineResponse.text()
      console.error('LINE Notify error:', errorText)
      return new Response(
        JSON.stringify({ error: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Notify Token' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    const result = await lineResponse.json()
    console.log('LINE Notify success:', result)

    return new Response(
      JSON.stringify({ success: true, message: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 }
    )

  } catch (error) {
    console.error('Error in send-line-notification:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})
